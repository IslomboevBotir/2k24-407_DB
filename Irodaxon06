create table if not exists courses (
    course_id serial primary key,
    course_name varchar(100) not null,
    credit_hours integer not null
);

create table if not exists enrollments (
    enrollment_id serial primary key,
    student_id integer not null,
    course_id integer not null,
    grade integer,
    foreign key (student_id) references students(student_id),
    foreign key (course_id) references courses(course_id)
);


insert into courses (course_name, credit_hours) values
('mathematics', 3),
('history', 3),
('physics', 4),
('chemistry', 4),
('biology', 3),
('computer science', 3),
('english literature', 2),
('philosophy', 3),
('economics', 3),
('psychology', 3);


create table course_registration (
    registration_id int primary key,
    student_id int,
    course_id int,
    grade decimal(3, 2),
    registration_date date
);


insert into enrollments (student_id, course_id, grade)
values 
  (1, 1, 5), (1, 2, 4), (1, 3, 5),
  (2, 4, 3), (2, 5, 4), (2, 6, 5),
  (3, 7, 4), (3, 8, 5), (3, 9, 3),
  (4, 10, 5), (4, 1, 3), (4, 2, 4),
  (5, 3, 4), (5, 4, 3), (5, 5, 4),
  (6, 6, 3), (6, 7, 4), (6, 8, 5),
  (7, 9, 5), (7, 10, 3), (7, 1, 4),
  (8, 2, 5), (8, 3, 3), (8, 4, 3),
  (9, 5, 4), (9, 6, 4), (9, 7, 5),
  (10, 8, 4), (10, 9, 3), (10, 10, 4);




-- 3.1 --

select first_name, last_name, birthdate
from students;


select s.first_name, s.last_name, s.birthdate, c.course_name
from students s
join enrollments e on s.student_id = e.student_id
join courses c on e.course_id = c.course_id
where c.course_name = 'mathematics';


select s.first_name, s.last_name, avg(e.grade) as gpa
from students s
join enrollments e on s.student_id = e.student_id
group by s.student_id
having avg(e.grade) < 4;

-- 3.2 --

select s.first_name, s.last_name, c.course_name
from students s
join enrollments e on s.student_id = e.student_id
join courses c on e.course_id = c.course_id;


select s.first_name, s.last_name
from students s
left join enrollments e on s.student_id = e.student_id
where e.student_id is null;

-- 3.3 --

select c.course_name, count(e.student_id) as student_count
from courses c
left join enrollments e on c.course_id = e.course_id
group by c.course_name
order by student_count desc;


select c.course_name, count(e.student_id) as student_count
from courses c
left join enrollments e on c.course_id = e.course_id
group by c.course_name
order by student_count desc
limit 1;

-- 3.4 --

select first_name, last_name
from students
order by last_name;


select s.first_name, s.last_name
from students s
join enrollments e on s.student_id = e.student_id
join courses c on e.course_id = c.course_id
where s.enrollment_year > 2015
and c.course_name = 'history';

-- 3.5 --

with course_counts as (
  select student_id, count(*) as course_count
  from enrollments
  group by student_id
),
average_course_count as (
  select avg(course_count) as avg_courses_per_student
  from course_counts
)
select s.first_name, s.last_name, cc.course_count
from students s
join course_counts cc on s.student_id = cc.student_id
cross join average_course_count avg_cc
where cc.course_count > avg_cc.avg_courses_per_student;


with average_grades as (
  select student_id, avg(grade) as avg_grade
  from enrollments
  group by student_id
),
lowest_avg_grade as (
  select min(avg_grade) as min_avg_grade
  from average_grades
),
students_with_lowest_avg as (
  select student_id
  from average_grades
  where avg_grade = (select min_avg_grade from lowest_avg_grade)
)
select s.first_name, s.last_name, c.course_name
from students s
join enrollments e on s.student_id = e.student_id
join courses c on e.course_id = c.course_id
where s.student_id in (select student_id from students_with_lowest_avg);

-- 3.6 --

update enrollments
set grade = 3
where grade = 4;


delete from students
where student_id not in (select distinct student_id from enrollments);




-- 4 --

select c.course_name as "course name", round(avg(e.grade), 2) as "average score"
from courses c
left join enrollments e on c.course_id = e.course_id
group by c.course_name
order by c.course_name;


select c.course_name as "course name", round(avg(e.grade), 2) as "average score"
from courses c
join enrollments e on c.course_id = e.course_id
where e.grade is not null
group by c.course_name
order by c.course_name;
